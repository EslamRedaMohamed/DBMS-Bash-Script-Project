#!/bin/bash

# The script expects a database name as its first argument.
dbName=$1

# Prompt the user to enter the table name they want to update.
echo "---------------------------------------------------------------------------------------"
read -p "Enter table you want to update: " tableName
echo "---------------------------------------------------------------------------------------"

# Check if the table file exists.
if [ ! -f "./dbs/$dbName/$tableName" ]; then
    echo "---------------------------------------------------------------------------------------"
    echo "Table $tableName is not found"
    echo "---------------------------------------------------------------------------------------"
    exit
fi

# Define paths for the metadata file and the table file.
metaFile="./dbs/$dbName/.metadata/$tableName.meta"
tableFile="./dbs/$dbName/$tableName"

# Function to get the column number and type from the metadata file.
getColumnNumber() {
    column=$1

    # Get column number.
    colNum=$(awk -v col="$column" 'BEGIN {RS="\n"; FS=":"} {if ($1 == col) print NR}' "$metaFile")
    # Get column type.
    type=$(awk -v col="$column" 'BEGIN {RS="\n"; FS=":"} {if ($1 == col) print $2}' "$metaFile")

    echo "$colNum,$type"
}

# Prompt the user to enter the column they want to update.
echo "---------------------------------------------------------------------------------------"
read -p "Enter column you want to update: " column
echo "---------------------------------------------------------------------------------------"

# Get the column number and type.
getcol=$(getColumnNumber "$column")
colNum=$(echo "$getcol" | cut -d ',' -f 1)
type=$(echo "$getcol" | cut -d ',' -f 2)

# Check if the column exists.
if [ -z "$colNum" ]; then
    echo "---------------------------------------------------------------------------------------"
    echo "Column $column is not found"
    echo "---------------------------------------------------------------------------------------"
else
    # Prompt the user to enter the new value.
    echo "---------------------------------------------------------------------------------------"
    read -p "Enter new value you want($column($type)): " new
    echo "---------------------------------------------------------------------------------------"

    # Determine the type check based on the column type.
    typecheck=""
    if [[ "$type" == "string" ]]; then
        typecheck='^[A-Za-Z]+$'
    else
        typecheck='^[0-9]+$'
    fi

    # Validate the new value against the column type.
    if [[ ! "$new" =~ $typecheck ]]; then
        echo "---------------------------------------------------------------------------------------"
        echo "Please follow type of value $type"!!
        echo "---------------------------------------------------------------------------------------"
    else
        # Prompt the user to enter the condition column.
        echo "---------------------------------------------------------------------------------------"
        read -p "Enter condition column Name that : " ccolumn
        echo "---------------------------------------------------------------------------------------"

        getccol=$(getColumnNumber "$ccolumn")
        ccolNum=$(echo "$getccol" | cut -d ',' -f 1)
        ctype=$(echo "$getccol" | cut -d ',' -f 2)

        # Determine the type check based on the condition column type.
        ctypecheck=""
        if [[ "$ctype" == "string" ]]; then
            ctypecheck='^[A-Za-Z]+$'
        else
            ctypecheck='^[0-9]+$'
        fi

        # Check if the condition column exists.
        if [ -z "$ccolNum" ]; then
            echo "---------------------------------------------------------------------------------------"
            echo "$ccolumn not found!"
            echo "---------------------------------------------------------------------------------------"
        else
            # Prompt the user to enter the condition value.
            echo "---------------------------------------------------------------------------------------"
            read -p "Enter condition column value that($ccolumn($ctype)): " cvalue
            echo "---------------------------------------------------------------------------------------"

            # Validate the condition value against the column type.
            if [[ ! "$cvalue" =~ $ctypecheck ]]; then
                echo "---------------------------------------------------------------------------------------"
                echo "Please follow column type $ctype" !!
                echo "---------------------------------------------------------------------------------------"
            else
                # Prepare the condition for awk.
                condition=($ccolNum "$cvalue" $colNum "$new")
                IFS=','; conditionStr="${condition[*]}"; unset IFS

                # Update the table file with the new value.
                awk -v condition="$conditionStr" '
                BEGIN {
                    FS = "|";
                    OFS = "|";
                    split(condition, arr, ",");
                    count=0
                }
                {
                    ccol = arr[1];
                    cval = arr[2];
                    col = arr[3];
                    new = arr[4];

                    if ($ccol == cval) {
                        $col = new;
                        count++;
                    }
                    print $0;
                }
                END{print count;}' "$tableFile" > ./output

                # Replace the original table file with the updated content.
                count=$(cat ./output | tail -1)
                echo "$(sed '$d' "./output")" > ./output
                mv ./output "$tableFile"
                echo "---------------------------------------------------------------------------------------"
                echo "$count Rows with $ccolumn = $cvalue updated in table $tableName."
                echo "---------------------------------------------------------------------------------------"
            fi
        fi
    fi
fi
